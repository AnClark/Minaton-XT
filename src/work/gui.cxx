// generated by Fast Light User Interface Designer (fluid) version 1.0300

#include "gui.h"
#include "dcf.h"
#include "dco.h"
#include "dca.h"
#include "files.h"
#include "main.h"
#include <math.h>

Fl_Tile *dco1_panel=(Fl_Tile *)0;

Fl_Tile *dco2_panel=(Fl_Tile *)0;

Fl_Tile *dco3_panel=(Fl_Tile *)0;

Fl_Tile *lfo1_panel=(Fl_Tile *)0;

Fl_Tile *lfo2_panel=(Fl_Tile *)0;

static void cb_TRIGGER(Fl_Button*, void*) {
  trigger_envelope1();
trigger_envelope2();
}

static void cb_RELEASE(Fl_Button*, void*) {
  release_envelope1();
release_envelope2();
}

Fl_Button *legato_button=(Fl_Button *)0;

static void cb_legato_button(Fl_Button*, void*) {
  toggle_legato();
}

Fl_Button *sync_button=(Fl_Button *)0;

static void cb_sync_button(Fl_Button*, void*) {
  toggle_sync();
}

Fl_Value_Slider *master_volume=(Fl_Value_Slider *)0;

Fl_Value_Slider *midi_channel=(Fl_Value_Slider *)0;

static void cb_PATCH(Fl_Button*, void*) {
  show_patch_window();
}

Fl_Dial *inertia1=(Fl_Dial *)0;

static void cb_inertia1(Fl_Dial*, void*) {
  set_dco_inertia(0,inertia1->value());
}

Fl_Value_Slider *pitch1=(Fl_Value_Slider *)0;

static void cb_pitch1(Fl_Value_Slider*, void*) {
  update_dco1_tuning();
}

static void cb_CENTRE(Fl_Button*, void*) {
  pitch1->value(0);
update_dco1_tuning();
}

Fl_Value_Slider *wave1=(Fl_Value_Slider *)0;

static void cb_wave1(Fl_Value_Slider*, void*) {
  set_dco_wave(0,wave1->value());
update_dco1_tuning();
}

Fl_Button *active1=(Fl_Button *)0;

static void cb_active1(Fl_Button*, void*) {
  if (active1->value())
{
	dco_on(0);
}
else
{
	dco_off(0);
};
}

#include <FL/Fl_Image.H>
static unsigned char idata_sine[] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,
255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,
255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,255,0,
0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,
0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,
255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,
255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,
0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,
255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,
0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,
255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,255,0,0,
0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,
0,255,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,
255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,
0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,
0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
static Fl_RGB_Image image_sine(idata_sine, 24, 24, 4, 0);

static unsigned char idata_saw[] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,
0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,
0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,
0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,
255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
static Fl_RGB_Image image_saw(idata_saw, 16, 16, 4, 0);

static unsigned char idata_square[] =
{255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,0,0,0,255,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,0,0,0,255,0,0,0,255,0,0,
0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,
0,255,0,0,0,255,0,0,0,255,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,
255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,255,255,0,255,255,255,
0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,0,0,0,255,0,0,0,255,
0,0,0,255,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,0,0,0,255,0,
0,0,255,0,0,0,255,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,0,0,0,255,0,0,0,255,0,0,0,255,255,255,255,0,255,255,255,
0,255,255,255,0,255,255,255,0,0,0,0,255,0,0,0,255,0,0,0,255,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,0,0,0,255,0,0,
0,255,0,0,0,255,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,0,0,0,
255,0,0,0,255,0,0,0,255,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,0,0,0,255,0,0,0,255,0,0,0,255,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,0,0,0,255,0,0,0,255,0,0,0,255,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,0,0,0,255,
0,0,0,255,0,0,0,255,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,0,
0,0,255,0,0,0,255,0,0,0,255,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,0,0,0,255,0,0,0,255,0,0,0,255,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,0,0,0,255,0,0,0,255,0,0,0,255,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,0,0,
0,255,0,0,0,255,0,0,0,255,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,
0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,
255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,
255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
0,0,0,255,0,0,0,255,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0};
static Fl_RGB_Image image_square(idata_square, 16, 16, 4, 0);

static unsigned char idata_triangle[] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,
0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,
0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,
255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,
255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,
0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,
0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,
255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,
255,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,
0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,255,0,0,0,255};
static Fl_RGB_Image image_triangle(idata_triangle, 16, 16, 4, 0);

static unsigned char idata_noise[] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,
255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,255,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,
0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,
0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,
0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,
0,255,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,
0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,
0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,
255,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,
0,255,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,
0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
static Fl_RGB_Image image_noise(idata_noise, 16, 16, 4, 0);

Fl_Dial *inertia2=(Fl_Dial *)0;

static void cb_inertia2(Fl_Dial*, void*) {
  set_dco_inertia(1,inertia2->value());
}

Fl_Value_Slider *pitch2=(Fl_Value_Slider *)0;

static void cb_pitch2(Fl_Value_Slider*, void*) {
  update_dco2_tuning();
}

static void cb_CENTRE1(Fl_Button*, void*) {
  pitch2->value(0);
update_dco2_tuning();
}

Fl_Value_Slider *wave2=(Fl_Value_Slider *)0;

static void cb_wave2(Fl_Value_Slider*, void*) {
  set_dco_wave(1,wave2->value());
update_dco2_tuning();
}

Fl_Button *active2=(Fl_Button *)0;

static void cb_active2(Fl_Button*, void*) {
  if (active2->value())
{
	dco_on(1);
}
else
{
	dco_off(1);
};
}

Fl_Dial *inertia3=(Fl_Dial *)0;

static void cb_inertia3(Fl_Dial*, void*) {
  set_dco_inertia(2,inertia3->value());
}

Fl_Value_Slider *pitch3=(Fl_Value_Slider *)0;

static void cb_pitch3(Fl_Value_Slider*, void*) {
  update_dco3_tuning();
}

static void cb_CENTRE2(Fl_Button*, void*) {
  pitch3->value(0);
update_dco3_tuning();
}

Fl_Value_Slider *wave3=(Fl_Value_Slider *)0;

static void cb_wave3(Fl_Value_Slider*, void*) {
  set_dco_wave(2,wave3->value());
update_dco3_tuning();
}

Fl_Button *active3=(Fl_Button *)0;

static void cb_active3(Fl_Button*, void*) {
  if (active3->value())
{
	dco_on(2);
}
else
{
	dco_off(2);
};
}

Fl_Value_Slider *freq=(Fl_Value_Slider *)0;

static void cb_freq(Fl_Value_Slider*, void*) {
  set_dcf_frequency(freq->value());
}

Fl_Value_Slider *res=(Fl_Value_Slider *)0;

static void cb_res(Fl_Value_Slider*, void*) {
  set_dcf_resonance(res->value());
}

Fl_Value_Slider *wave4=(Fl_Value_Slider *)0;

static void cb_wave4(Fl_Value_Slider*, void*) {
  set_dco_wave(3,wave4->value());
set_dco_frequency(3,lfo1speed->value());
}

Fl_Value_Slider *lfo1_dco1_pitch=(Fl_Value_Slider *)0;

static void cb_lfo1_dco1_pitch(Fl_Value_Slider*, void*) {
  set_dco_lfo1_amount(0,lfo1_dco1_pitch->value());
}

Fl_Value_Slider *lfo1_dco2_pitch=(Fl_Value_Slider *)0;

static void cb_lfo1_dco2_pitch(Fl_Value_Slider*, void*) {
  set_dco_lfo1_amount(1,lfo1_dco2_pitch->value());
}

Fl_Value_Slider *lfo1_dco3_pitch=(Fl_Value_Slider *)0;

static void cb_lfo1_dco3_pitch(Fl_Value_Slider*, void*) {
  set_dco_lfo1_amount(2,lfo1_dco3_pitch->value());
}

Fl_Value_Slider *lfo1_dcf=(Fl_Value_Slider *)0;

static void cb_lfo1_dcf(Fl_Value_Slider*, void*) {
  set_lfo1_dcf_amount(lfo1_dcf->value());
}

Fl_Dial *lfo1speed=(Fl_Dial *)0;

static void cb_lfo1speed(Fl_Dial*, void*) {
  set_dco_frequency(3,lfo1speed->value());
}

Fl_Value_Slider *wave5=(Fl_Value_Slider *)0;

static void cb_wave5(Fl_Value_Slider*, void*) {
  set_dco_wave(4,wave5->value());
set_dco_frequency(4,lfo2speed->value());
}

Fl_Value_Slider *lfo2_dco1_pitch=(Fl_Value_Slider *)0;

static void cb_lfo2_dco1_pitch(Fl_Value_Slider*, void*) {
  set_dco_lfo2_amount(0,lfo2_dco1_pitch->value());
}

Fl_Value_Slider *lfo2_dco2_pitch=(Fl_Value_Slider *)0;

static void cb_lfo2_dco2_pitch(Fl_Value_Slider*, void*) {
  set_dco_lfo2_amount(1,lfo2_dco2_pitch->value());
}

Fl_Value_Slider *lfo2_dco3_pitch=(Fl_Value_Slider *)0;

static void cb_lfo2_dco3_pitch(Fl_Value_Slider*, void*) {
  set_dco_lfo2_amount(2,lfo2_dco3_pitch->value());
}

Fl_Value_Slider *lfo2_dcf=(Fl_Value_Slider *)0;

static void cb_lfo2_dcf(Fl_Value_Slider*, void*) {
  set_lfo2_dcf_amount(lfo2_dcf->value());
}

Fl_Dial *lfo2speed=(Fl_Dial *)0;

static void cb_lfo2speed(Fl_Dial*, void*) {
  set_dco_frequency(4,lfo2speed->value());
}

Fl_Value_Slider *adsr_amp_amount1=(Fl_Value_Slider *)0;

Fl_Value_Slider *attack1=(Fl_Value_Slider *)0;

static void cb_attack1(Fl_Value_Slider*, void*) {
  set_envelope1_attack(attack1->value());
}

Fl_Value_Slider *decay1=(Fl_Value_Slider *)0;

static void cb_decay1(Fl_Value_Slider*, void*) {
  set_envelope1_decay(decay1->value());
}

Fl_Value_Slider *sustain1=(Fl_Value_Slider *)0;

static void cb_sustain1(Fl_Value_Slider*, void*) {
  set_envelope1_sustain(sustain1->value());
}

Fl_Value_Slider *release1=(Fl_Value_Slider *)0;

static void cb_release1(Fl_Value_Slider*, void*) {
  set_envelope1_release(release1->value());
}

Fl_Value_Slider *adsr_osc2_amount1=(Fl_Value_Slider *)0;

Fl_Value_Slider *attack2=(Fl_Value_Slider *)0;

static void cb_attack2(Fl_Value_Slider*, void*) {
  set_envelope2_attack(attack2->value());
}

Fl_Value_Slider *decay2=(Fl_Value_Slider *)0;

static void cb_decay2(Fl_Value_Slider*, void*) {
  set_envelope2_decay(decay2->value());
}

Fl_Value_Slider *sustain2=(Fl_Value_Slider *)0;

static void cb_sustain2(Fl_Value_Slider*, void*) {
  set_envelope2_sustain(sustain2->value());
}

Fl_Value_Slider *release2=(Fl_Value_Slider *)0;

static void cb_release2(Fl_Value_Slider*, void*) {
  set_envelope2_release(release2->value());
}

Fl_Value_Slider *adsr_filter_amount2=(Fl_Value_Slider *)0;

Fl_Value_Slider *adsr_osc3_amount2=(Fl_Value_Slider *)0;

Fl_Dial *octave1=(Fl_Dial *)0;

static void cb_octave1(Fl_Dial*, void*) {
  update_dco1_tuning();
}

Fl_Dial *octave2=(Fl_Dial *)0;

static void cb_octave2(Fl_Dial*, void*) {
  update_dco2_tuning();
}

Fl_Dial *octave3=(Fl_Dial *)0;

static void cb_octave3(Fl_Dial*, void*) {
  update_dco3_tuning();
}

Fl_Double_Window* make_window() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(910, 610, "Minaton Mono Synth v0.0.2 - By Nick Bailey - ThunderOx Software");
    w = o;
    o->color((Fl_Color)104);
    o->labelsize(12);
    { dco1_panel = new Fl_Tile(10, 18, 460, 120, "DCO 1");
      dco1_panel->box(FL_GTK_ROUND_UP_BOX);
      dco1_panel->color(FL_DARK2);
      dco1_panel->selection_color(FL_FOREGROUND_COLOR);
      dco1_panel->labelcolor(FL_BACKGROUND2_COLOR);
      dco1_panel->end();
    } // Fl_Tile* dco1_panel
    { dco2_panel = new Fl_Tile(10, 160, 460, 120, "DCO 2");
      dco2_panel->box(FL_GTK_ROUND_UP_BOX);
      dco2_panel->color((Fl_Color)44);
      dco2_panel->labelcolor(FL_BACKGROUND2_COLOR);
      dco2_panel->when(FL_WHEN_NEVER);
      dco2_panel->end();
    } // Fl_Tile* dco2_panel
    { dco3_panel = new Fl_Tile(10, 300, 460, 120, "DCO 3");
      dco3_panel->box(FL_GTK_ROUND_UP_BOX);
      dco3_panel->color((Fl_Color)44);
      dco3_panel->labelcolor(FL_BACKGROUND2_COLOR);
      dco3_panel->end();
    } // Fl_Tile* dco3_panel
    { lfo1_panel = new Fl_Tile(480, 20, 350, 120, "LFO 1");
      lfo1_panel->box(FL_GTK_ROUND_UP_BOX);
      lfo1_panel->color((Fl_Color)44);
      lfo1_panel->selection_color(FL_FOREGROUND_COLOR);
      lfo1_panel->labelcolor(FL_BACKGROUND2_COLOR);
      lfo1_panel->end();
    } // Fl_Tile* lfo1_panel
    { lfo2_panel = new Fl_Tile(480, 160, 350, 120, "LFO 2");
      lfo2_panel->box(FL_GTK_ROUND_UP_BOX);
      lfo2_panel->color((Fl_Color)44);
      lfo2_panel->selection_color(FL_FOREGROUND_COLOR);
      lfo2_panel->labelcolor(FL_BACKGROUND2_COLOR);
      lfo2_panel->end();
    } // Fl_Tile* lfo2_panel
    { Fl_Tile* o = new Fl_Tile(10, 440, 460, 120, "FILTER");
      o->box(FL_GTK_ROUND_UP_BOX);
      o->color((Fl_Color)44);
      o->selection_color(FL_FOREGROUND_COLOR);
      o->labelcolor(FL_BACKGROUND2_COLOR);
      o->end();
    } // Fl_Tile* o
    { Fl_Tile* o = new Fl_Tile(480, 300, 350, 120, "ADSR 1");
      o->box(FL_GTK_ROUND_UP_BOX);
      o->color((Fl_Color)44);
      o->selection_color(FL_FOREGROUND_COLOR);
      o->labelcolor(FL_BACKGROUND2_COLOR);
      o->end();
    } // Fl_Tile* o
    { Fl_Tile* o = new Fl_Tile(480, 440, 350, 120, "ADSR 2");
      o->box(FL_GTK_ROUND_UP_BOX);
      o->color((Fl_Color)44);
      o->selection_color(FL_FOREGROUND_COLOR);
      o->labelcolor(FL_BACKGROUND2_COLOR);
      o->end();
    } // Fl_Tile* o
    { Fl_Button* o = new Fl_Button(10, 570, 80, 30, "TRIGGER");
      o->box(FL_GTK_ROUND_UP_BOX);
      o->color((Fl_Color)43);
      o->labelsize(10);
      o->callback((Fl_Callback*)cb_TRIGGER);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(100, 570, 80, 30, "RELEASE");
      o->box(FL_GTK_ROUND_UP_BOX);
      o->color((Fl_Color)43);
      o->labelsize(10);
      o->callback((Fl_Callback*)cb_RELEASE);
    } // Fl_Button* o
    { legato_button = new Fl_Button(300, 570, 80, 30, "LEGATO");
      legato_button->type(1);
      legato_button->box(FL_GTK_ROUND_UP_BOX);
      legato_button->color((Fl_Color)43);
      legato_button->labelsize(10);
      legato_button->callback((Fl_Callback*)cb_legato_button);
    } // Fl_Button* legato_button
    { sync_button = new Fl_Button(390, 570, 80, 30, "SYNC 1+2");
      sync_button->type(1);
      sync_button->box(FL_GTK_ROUND_UP_BOX);
      sync_button->color((Fl_Color)43);
      sync_button->labelsize(10);
      sync_button->callback((Fl_Callback*)cb_sync_button);
    } // Fl_Button* sync_button
    { master_volume = new Fl_Value_Slider(850, 320, 30, 260, "VOLUME");
      master_volume->type(4);
      master_volume->box(FL_PLASTIC_UP_BOX);
      master_volume->color(FL_FOREGROUND_COLOR);
      master_volume->labelsize(10);
      master_volume->labelcolor(FL_BACKGROUND2_COLOR);
      master_volume->minimum(1);
      master_volume->maximum(500);
      master_volume->step(0.1);
      master_volume->value(80);
    } // Fl_Value_Slider* master_volume
    { midi_channel = new Fl_Value_Slider(850, 40, 30, 260, "MIDI CHANNEL");
      midi_channel->type(4);
      midi_channel->box(FL_PLASTIC_UP_BOX);
      midi_channel->color(FL_FOREGROUND_COLOR);
      midi_channel->labelsize(10);
      midi_channel->labelcolor(FL_BACKGROUND2_COLOR);
      midi_channel->minimum(16);
      midi_channel->step(1);
      midi_channel->value(1);
    } // Fl_Value_Slider* midi_channel
    { Fl_Button* o = new Fl_Button(190, 570, 100, 30, "PATCH MANAGER");
      o->box(FL_GTK_ROUND_UP_BOX);
      o->color((Fl_Color)43);
      o->labelsize(10);
      o->callback((Fl_Callback*)cb_PATCH);
    } // Fl_Button* o
    { inertia1 = new Fl_Dial(390, 66, 32, 32, "INERTIA");
      inertia1->type(1);
      inertia1->box(FL_GTK_ROUND_UP_BOX);
      inertia1->color(FL_DARK2);
      inertia1->labelsize(10);
      inertia1->minimum(0.5);
      inertia1->maximum(0.001);
      inertia1->step(0.001);
      inertia1->value(0.5);
      inertia1->callback((Fl_Callback*)cb_inertia1);
    } // Fl_Dial* inertia1
    { pitch1 = new Fl_Value_Slider(120, 34, 240, 24, "FINE TUNE");
      pitch1->type(5);
      pitch1->box(FL_PLASTIC_UP_BOX);
      pitch1->color(FL_FOREGROUND_COLOR);
      pitch1->labelsize(10);
      pitch1->minimum(-7);
      pitch1->maximum(7);
      pitch1->textsize(8);
      pitch1->callback((Fl_Callback*)cb_pitch1);
    } // Fl_Value_Slider* pitch1
    { Fl_Button* o = new Fl_Button(370, 40, 70, 20, "CENTRE");
      o->box(FL_GTK_ROUND_UP_BOX);
      o->color(FL_DARK1);
      o->labelsize(10);
      o->callback((Fl_Callback*)cb_CENTRE);
    } // Fl_Button* o
    { wave1 = new Fl_Value_Slider(120, 74, 240, 24);
      wave1->type(5);
      wave1->box(FL_PLASTIC_UP_BOX);
      wave1->color(FL_FOREGROUND_COLOR);
      wave1->labelsize(10);
      wave1->maximum(4);
      wave1->step(1);
      wave1->value(1);
      wave1->textsize(9);
      wave1->callback((Fl_Callback*)cb_wave1);
      wave1->align(Fl_Align(FL_ALIGN_LEFT));
    } // Fl_Value_Slider* wave1
    { active1 = new Fl_Button(40, 38, 70, 20, "ACTIVE");
      active1->type(1);
      active1->box(FL_GTK_ROUND_UP_BOX);
      active1->down_box(FL_PLASTIC_ROUND_DOWN_BOX);
      active1->color(FL_DARK1);
      active1->selection_color(FL_FOREGROUND_COLOR);
      active1->labelsize(9);
      active1->callback((Fl_Callback*)cb_active1);
    } // Fl_Button* active1
    { Fl_Box* o = new Fl_Box(150, 90, 40, 44);
      o->image(image_sine);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(190, 98, 40, 30);
      o->image(image_saw);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(230, 98, 40, 30);
      o->image(image_square);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(280, 98, 40, 30);
      o->image(image_triangle);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(320, 92, 40, 48);
      o->image(image_noise);
    } // Fl_Box* o
    { inertia2 = new Fl_Dial(390, 208, 32, 32, "INERTIA");
      inertia2->type(1);
      inertia2->box(FL_GTK_ROUND_UP_BOX);
      inertia2->color(FL_DARK2);
      inertia2->labelsize(10);
      inertia2->minimum(0.5);
      inertia2->maximum(0.001);
      inertia2->step(0.001);
      inertia2->value(0.5);
      inertia2->callback((Fl_Callback*)cb_inertia2);
    } // Fl_Dial* inertia2
    { pitch2 = new Fl_Value_Slider(120, 176, 240, 24, "FINE TUNE");
      pitch2->type(5);
      pitch2->box(FL_PLASTIC_UP_BOX);
      pitch2->color(FL_FOREGROUND_COLOR);
      pitch2->labelsize(10);
      pitch2->minimum(-7);
      pitch2->maximum(7);
      pitch2->textsize(8);
      pitch2->callback((Fl_Callback*)cb_pitch2);
    } // Fl_Value_Slider* pitch2
    { Fl_Button* o = new Fl_Button(370, 180, 70, 20, "CENTRE");
      o->box(FL_GTK_ROUND_UP_BOX);
      o->color(FL_DARK1);
      o->labelsize(10);
      o->callback((Fl_Callback*)cb_CENTRE1);
    } // Fl_Button* o
    { wave2 = new Fl_Value_Slider(120, 216, 240, 24);
      wave2->type(5);
      wave2->box(FL_PLASTIC_UP_BOX);
      wave2->color(FL_FOREGROUND_COLOR);
      wave2->labelsize(10);
      wave2->maximum(4);
      wave2->step(1);
      wave2->value(1);
      wave2->textsize(9);
      wave2->callback((Fl_Callback*)cb_wave2);
    } // Fl_Value_Slider* wave2
    { active2 = new Fl_Button(40, 180, 70, 20, "ACTIVE");
      active2->type(1);
      active2->box(FL_GTK_ROUND_UP_BOX);
      active2->down_box(FL_PLASTIC_ROUND_DOWN_BOX);
      active2->color(FL_DARK1);
      active2->selection_color(FL_FOREGROUND_COLOR);
      active2->labelsize(9);
      active2->callback((Fl_Callback*)cb_active2);
    } // Fl_Button* active2
    { Fl_Box* o = new Fl_Box(150, 232, 40, 44);
      o->image(image_sine);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(190, 240, 40, 30);
      o->image(image_saw);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(230, 240, 40, 30);
      o->image(image_square);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(280, 240, 40, 30);
      o->image(image_triangle);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(320, 232, 40, 48);
      o->image(image_noise);
    } // Fl_Box* o
    { inertia3 = new Fl_Dial(390, 350, 32, 32, "INERTIA");
      inertia3->type(1);
      inertia3->box(FL_GTK_ROUND_UP_BOX);
      inertia3->color(FL_DARK2);
      inertia3->labelsize(10);
      inertia3->minimum(0.5);
      inertia3->maximum(0.001);
      inertia3->step(0.001);
      inertia3->value(0.5);
      inertia3->callback((Fl_Callback*)cb_inertia3);
    } // Fl_Dial* inertia3
    { pitch3 = new Fl_Value_Slider(120, 316, 240, 24, "FINE TUNE");
      pitch3->type(5);
      pitch3->box(FL_PLASTIC_UP_BOX);
      pitch3->color(FL_FOREGROUND_COLOR);
      pitch3->labelsize(10);
      pitch3->minimum(-7);
      pitch3->maximum(7);
      pitch3->textsize(8);
      pitch3->callback((Fl_Callback*)cb_pitch3);
    } // Fl_Value_Slider* pitch3
    { Fl_Button* o = new Fl_Button(370, 320, 70, 20, "CENTRE");
      o->box(FL_GTK_ROUND_UP_BOX);
      o->color(FL_DARK1);
      o->labelsize(10);
      o->callback((Fl_Callback*)cb_CENTRE2);
    } // Fl_Button* o
    { wave3 = new Fl_Value_Slider(120, 356, 240, 24);
      wave3->type(5);
      wave3->box(FL_PLASTIC_UP_BOX);
      wave3->color(FL_FOREGROUND_COLOR);
      wave3->labelsize(10);
      wave3->maximum(4);
      wave3->step(1);
      wave3->value(1);
      wave3->textsize(9);
      wave3->callback((Fl_Callback*)cb_wave3);
    } // Fl_Value_Slider* wave3
    { active3 = new Fl_Button(40, 320, 70, 20, "ACTIVE");
      active3->type(1);
      active3->box(FL_GTK_ROUND_UP_BOX);
      active3->down_box(FL_PLASTIC_ROUND_DOWN_BOX);
      active3->color(FL_DARK1);
      active3->selection_color(FL_FOREGROUND_COLOR);
      active3->labelsize(9);
      active3->callback((Fl_Callback*)cb_active3);
    } // Fl_Button* active3
    { Fl_Box* o = new Fl_Box(150, 378, 40, 38);
      o->image(image_sine);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(190, 376, 40, 40);
      o->image(image_saw);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(230, 376, 40, 40);
      o->image(image_square);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(280, 376, 40, 40);
      o->image(image_triangle);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(320, 378, 40, 42);
      o->image(image_noise);
    } // Fl_Box* o
    { freq = new Fl_Value_Slider(50, 466, 380, 24, "FREQUENCY");
      freq->type(5);
      freq->box(FL_PLASTIC_UP_BOX);
      freq->color(FL_FOREGROUND_COLOR);
      freq->labelsize(10);
      freq->minimum(-0.1);
      freq->maximum(0.5);
      freq->step(0.0001);
      freq->textsize(9);
      freq->callback((Fl_Callback*)cb_freq);
    } // Fl_Value_Slider* freq
    { res = new Fl_Value_Slider(50, 506, 380, 24, "RESONANCE");
      res->type(5);
      res->box(FL_PLASTIC_UP_BOX);
      res->color(FL_FOREGROUND_COLOR);
      res->labelsize(10);
      res->minimum(0.1);
      res->maximum(2);
      res->step(0.001);
      res->textsize(9);
      res->callback((Fl_Callback*)cb_res);
    } // Fl_Value_Slider* res
    { wave4 = new Fl_Value_Slider(720, 30, 24, 100);
      wave4->type(4);
      wave4->box(FL_PLASTIC_UP_BOX);
      wave4->color(FL_DARK_BLUE);
      wave4->labelsize(9);
      wave4->minimum(4);
      wave4->maximum(7);
      wave4->step(1);
      wave4->value(5);
      wave4->textsize(9);
      wave4->callback((Fl_Callback*)cb_wave4);
    } // Fl_Value_Slider* wave4
    { lfo1_dco1_pitch = new Fl_Value_Slider(520, 30, 24, 90, "DCO 1");
      lfo1_dco1_pitch->type(4);
      lfo1_dco1_pitch->box(FL_PLASTIC_UP_BOX);
      lfo1_dco1_pitch->color(FL_FOREGROUND_COLOR);
      lfo1_dco1_pitch->labelsize(9);
      lfo1_dco1_pitch->minimum(48);
      lfo1_dco1_pitch->maximum(0);
      lfo1_dco1_pitch->textsize(9);
      lfo1_dco1_pitch->callback((Fl_Callback*)cb_lfo1_dco1_pitch);
    } // Fl_Value_Slider* lfo1_dco1_pitch
    { lfo1_dco2_pitch = new Fl_Value_Slider(560, 30, 24, 90, "DCO 2");
      lfo1_dco2_pitch->type(4);
      lfo1_dco2_pitch->box(FL_PLASTIC_UP_BOX);
      lfo1_dco2_pitch->color(FL_FOREGROUND_COLOR);
      lfo1_dco2_pitch->labelsize(9);
      lfo1_dco2_pitch->minimum(48);
      lfo1_dco2_pitch->maximum(0);
      lfo1_dco2_pitch->textsize(9);
      lfo1_dco2_pitch->callback((Fl_Callback*)cb_lfo1_dco2_pitch);
    } // Fl_Value_Slider* lfo1_dco2_pitch
    { lfo1_dco3_pitch = new Fl_Value_Slider(600, 30, 24, 90, "DCO 3");
      lfo1_dco3_pitch->type(4);
      lfo1_dco3_pitch->box(FL_PLASTIC_UP_BOX);
      lfo1_dco3_pitch->color(FL_FOREGROUND_COLOR);
      lfo1_dco3_pitch->labelsize(9);
      lfo1_dco3_pitch->minimum(48);
      lfo1_dco3_pitch->maximum(0);
      lfo1_dco3_pitch->textsize(9);
      lfo1_dco3_pitch->callback((Fl_Callback*)cb_lfo1_dco3_pitch);
    } // Fl_Value_Slider* lfo1_dco3_pitch
    { lfo1_dcf = new Fl_Value_Slider(640, 30, 24, 90, "FILTER");
      lfo1_dcf->type(4);
      lfo1_dcf->box(FL_PLASTIC_UP_BOX);
      lfo1_dcf->color(FL_FOREGROUND_COLOR);
      lfo1_dcf->labelsize(9);
      lfo1_dcf->minimum(8);
      lfo1_dcf->maximum(0);
      lfo1_dcf->step(0.001);
      lfo1_dcf->textsize(9);
      lfo1_dcf->callback((Fl_Callback*)cb_lfo1_dcf);
    } // Fl_Value_Slider* lfo1_dcf
    { lfo1speed = new Fl_Dial(760, 60, 40, 40, "SPEED");
      lfo1speed->type(1);
      lfo1speed->box(FL_GTK_ROUND_UP_BOX);
      lfo1speed->color((Fl_Color)44);
      lfo1speed->selection_color(FL_FOREGROUND_COLOR);
      lfo1speed->labelsize(9);
      lfo1speed->minimum(2);
      lfo1speed->maximum(256);
      lfo1speed->step(0.001);
      lfo1speed->value(2);
      lfo1speed->callback((Fl_Callback*)cb_lfo1speed);
    } // Fl_Dial* lfo1speed
    { Fl_Box* o = new Fl_Box(680, 62, 40, 28);
      o->image(image_sine);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(680, 90, 40, 20);
      o->image(image_saw);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(680, 120, 40, 10);
      o->image(image_square);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(680, 42, 40, 18);
      o->image(image_noise);
    } // Fl_Box* o
    { wave5 = new Fl_Value_Slider(720, 170, 24, 100);
      wave5->type(4);
      wave5->box(FL_PLASTIC_UP_BOX);
      wave5->color(FL_DARK_BLUE);
      wave5->labelsize(9);
      wave5->minimum(4);
      wave5->maximum(7);
      wave5->step(1);
      wave5->value(5);
      wave5->textsize(9);
      wave5->callback((Fl_Callback*)cb_wave5);
    } // Fl_Value_Slider* wave5
    { lfo2_dco1_pitch = new Fl_Value_Slider(520, 170, 24, 90, "DCO 1");
      lfo2_dco1_pitch->type(4);
      lfo2_dco1_pitch->box(FL_PLASTIC_UP_BOX);
      lfo2_dco1_pitch->color(FL_FOREGROUND_COLOR);
      lfo2_dco1_pitch->labelsize(9);
      lfo2_dco1_pitch->minimum(48);
      lfo2_dco1_pitch->maximum(0);
      lfo2_dco1_pitch->textsize(9);
      lfo2_dco1_pitch->callback((Fl_Callback*)cb_lfo2_dco1_pitch);
    } // Fl_Value_Slider* lfo2_dco1_pitch
    { lfo2_dco2_pitch = new Fl_Value_Slider(560, 170, 24, 90, "DCO 2");
      lfo2_dco2_pitch->type(4);
      lfo2_dco2_pitch->box(FL_PLASTIC_UP_BOX);
      lfo2_dco2_pitch->color(FL_FOREGROUND_COLOR);
      lfo2_dco2_pitch->labelsize(9);
      lfo2_dco2_pitch->minimum(48);
      lfo2_dco2_pitch->maximum(0);
      lfo2_dco2_pitch->textsize(9);
      lfo2_dco2_pitch->callback((Fl_Callback*)cb_lfo2_dco2_pitch);
    } // Fl_Value_Slider* lfo2_dco2_pitch
    { lfo2_dco3_pitch = new Fl_Value_Slider(600, 170, 24, 90, "DCO 3");
      lfo2_dco3_pitch->type(4);
      lfo2_dco3_pitch->box(FL_PLASTIC_UP_BOX);
      lfo2_dco3_pitch->color(FL_FOREGROUND_COLOR);
      lfo2_dco3_pitch->labelsize(9);
      lfo2_dco3_pitch->minimum(48);
      lfo2_dco3_pitch->maximum(0);
      lfo2_dco3_pitch->textsize(9);
      lfo2_dco3_pitch->callback((Fl_Callback*)cb_lfo2_dco3_pitch);
    } // Fl_Value_Slider* lfo2_dco3_pitch
    { lfo2_dcf = new Fl_Value_Slider(640, 170, 24, 90, "FILTER");
      lfo2_dcf->type(4);
      lfo2_dcf->box(FL_PLASTIC_UP_BOX);
      lfo2_dcf->color(FL_FOREGROUND_COLOR);
      lfo2_dcf->labelsize(9);
      lfo2_dcf->minimum(8);
      lfo2_dcf->maximum(0);
      lfo2_dcf->step(0.001);
      lfo2_dcf->textsize(9);
      lfo2_dcf->callback((Fl_Callback*)cb_lfo2_dcf);
    } // Fl_Value_Slider* lfo2_dcf
    { lfo2speed = new Fl_Dial(760, 196, 40, 40, "SPEED");
      lfo2speed->type(1);
      lfo2speed->box(FL_GTK_ROUND_UP_BOX);
      lfo2speed->color((Fl_Color)44);
      lfo2speed->selection_color(FL_FOREGROUND_COLOR);
      lfo2speed->labelsize(10);
      lfo2speed->minimum(2);
      lfo2speed->maximum(256);
      lfo2speed->step(0.001);
      lfo2speed->value(2);
      lfo2speed->callback((Fl_Callback*)cb_lfo2speed);
    } // Fl_Dial* lfo2speed
    { Fl_Box* o = new Fl_Box(680, 202, 40, 28);
      o->image(image_sine);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(680, 230, 40, 20);
      o->image(image_saw);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(680, 260, 40, 10);
      o->image(image_square);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(680, 182, 40, 18);
      o->image(image_noise);
    } // Fl_Box* o
    { adsr_amp_amount1 = new Fl_Value_Slider(730, 310, 24, 90, "AMP");
      adsr_amp_amount1->type(4);
      adsr_amp_amount1->box(FL_PLASTIC_UP_BOX);
      adsr_amp_amount1->color(FL_DARK_BLUE);
      adsr_amp_amount1->labelsize(8);
      adsr_amp_amount1->minimum(0.5);
      adsr_amp_amount1->maximum(16);
      adsr_amp_amount1->step(0.001);
      adsr_amp_amount1->value(1);
      adsr_amp_amount1->textsize(9);
    } // Fl_Value_Slider* adsr_amp_amount1
    { attack1 = new Fl_Value_Slider(520, 310, 24, 90, "ATTACK");
      attack1->type(4);
      attack1->box(FL_PLASTIC_UP_BOX);
      attack1->color(FL_FOREGROUND_COLOR);
      attack1->labelsize(8);
      attack1->minimum(70);
      attack1->step(0.001);
      attack1->textsize(8);
      attack1->callback((Fl_Callback*)cb_attack1);
    } // Fl_Value_Slider* attack1
    { decay1 = new Fl_Value_Slider(560, 310, 24, 90, "DECAY");
      decay1->type(4);
      decay1->box(FL_PLASTIC_UP_BOX);
      decay1->color(FL_FOREGROUND_COLOR);
      decay1->labelsize(8);
      decay1->minimum(70);
      decay1->maximum(30);
      decay1->step(0.001);
      decay1->value(1);
      decay1->textsize(8);
      decay1->callback((Fl_Callback*)cb_decay1);
    } // Fl_Value_Slider* decay1
    { sustain1 = new Fl_Value_Slider(600, 310, 24, 90, "SUSTAIN");
      sustain1->type(4);
      sustain1->box(FL_PLASTIC_UP_BOX);
      sustain1->color(FL_FOREGROUND_COLOR);
      sustain1->labelsize(8);
      sustain1->minimum(1);
      sustain1->maximum(0);
      sustain1->step(0.001);
      sustain1->textsize(8);
      sustain1->callback((Fl_Callback*)cb_sustain1);
    } // Fl_Value_Slider* sustain1
    { release1 = new Fl_Value_Slider(640, 310, 24, 90, "RELEASE");
      release1->type(4);
      release1->box(FL_PLASTIC_UP_BOX);
      release1->color(FL_FOREGROUND_COLOR);
      release1->labelsize(8);
      release1->minimum(70);
      release1->maximum(30);
      release1->step(0.0001);
      release1->value(30);
      release1->textsize(8);
      release1->callback((Fl_Callback*)cb_release1);
    } // Fl_Value_Slider* release1
    { adsr_osc2_amount1 = new Fl_Value_Slider(760, 310, 24, 90, "OSC2");
      adsr_osc2_amount1->type(4);
      adsr_osc2_amount1->box(FL_PLASTIC_UP_BOX);
      adsr_osc2_amount1->color(FL_DARK_BLUE);
      adsr_osc2_amount1->labelsize(8);
      adsr_osc2_amount1->minimum(16);
      adsr_osc2_amount1->maximum(0);
      adsr_osc2_amount1->textsize(9);
    } // Fl_Value_Slider* adsr_osc2_amount1
    { attack2 = new Fl_Value_Slider(520, 450, 24, 90, "ATTACK");
      attack2->type(4);
      attack2->box(FL_PLASTIC_UP_BOX);
      attack2->color(FL_FOREGROUND_COLOR);
      attack2->labelsize(8);
      attack2->minimum(70);
      attack2->maximum(0.01);
      attack2->step(0.001);
      attack2->textsize(8);
      attack2->callback((Fl_Callback*)cb_attack2);
    } // Fl_Value_Slider* attack2
    { decay2 = new Fl_Value_Slider(560, 450, 24, 90, "DECAY");
      decay2->type(4);
      decay2->box(FL_PLASTIC_UP_BOX);
      decay2->color(FL_FOREGROUND_COLOR);
      decay2->labelsize(8);
      decay2->minimum(70);
      decay2->maximum(30);
      decay2->step(1);
      decay2->value(1);
      decay2->textsize(8);
      decay2->callback((Fl_Callback*)cb_decay2);
    } // Fl_Value_Slider* decay2
    { sustain2 = new Fl_Value_Slider(600, 450, 24, 90, "SUSTAIN");
      sustain2->type(4);
      sustain2->box(FL_PLASTIC_UP_BOX);
      sustain2->color(FL_FOREGROUND_COLOR);
      sustain2->labelsize(8);
      sustain2->minimum(1);
      sustain2->maximum(0);
      sustain2->textsize(8);
      sustain2->callback((Fl_Callback*)cb_sustain2);
    } // Fl_Value_Slider* sustain2
    { release2 = new Fl_Value_Slider(640, 450, 24, 90, "RELEASE");
      release2->type(4);
      release2->box(FL_PLASTIC_UP_BOX);
      release2->color(FL_FOREGROUND_COLOR);
      release2->labelsize(8);
      release2->minimum(70);
      release2->maximum(30);
      release2->step(0.001);
      release2->value(30);
      release2->textsize(8);
      release2->callback((Fl_Callback*)cb_release2);
    } // Fl_Value_Slider* release2
    { adsr_filter_amount2 = new Fl_Value_Slider(730, 450, 24, 90, "FILTER");
      adsr_filter_amount2->type(4);
      adsr_filter_amount2->box(FL_PLASTIC_UP_BOX);
      adsr_filter_amount2->color(FL_DARK_BLUE);
      adsr_filter_amount2->labelsize(8);
      adsr_filter_amount2->minimum(1);
      adsr_filter_amount2->maximum(16);
      adsr_filter_amount2->value(1);
      adsr_filter_amount2->textsize(9);
    } // Fl_Value_Slider* adsr_filter_amount2
    { adsr_osc3_amount2 = new Fl_Value_Slider(760, 450, 24, 90, "OSC3");
      adsr_osc3_amount2->type(4);
      adsr_osc3_amount2->box(FL_PLASTIC_UP_BOX);
      adsr_osc3_amount2->color(FL_DARK_BLUE);
      adsr_osc3_amount2->labelsize(8);
      adsr_osc3_amount2->minimum(16);
      adsr_osc3_amount2->maximum(0);
      adsr_osc3_amount2->textsize(9);
    } // Fl_Value_Slider* adsr_osc3_amount2
    { octave1 = new Fl_Dial(60, 68, 32, 32, "OCTAVE");
      octave1->type(1);
      octave1->box(FL_GTK_ROUND_UP_BOX);
      octave1->color(FL_DARK2);
      octave1->labelsize(10);
      octave1->minimum(-4);
      octave1->maximum(4);
      octave1->step(1);
      octave1->callback((Fl_Callback*)cb_octave1);
    } // Fl_Dial* octave1
    { octave2 = new Fl_Dial(60, 208, 32, 32, "OCTAVE");
      octave2->type(1);
      octave2->box(FL_GTK_ROUND_UP_BOX);
      octave2->color(FL_DARK2);
      octave2->labelsize(10);
      octave2->minimum(-4);
      octave2->maximum(4);
      octave2->step(1);
      octave2->callback((Fl_Callback*)cb_octave2);
    } // Fl_Dial* octave2
    { octave3 = new Fl_Dial(60, 348, 32, 32, "OCTAVE");
      octave3->type(1);
      octave3->box(FL_GTK_ROUND_UP_BOX);
      octave3->color(FL_DARK2);
      octave3->labelsize(10);
      octave3->minimum(-4);
      octave3->maximum(4);
      octave3->step(1);
      octave3->callback((Fl_Callback*)cb_octave3);
    } // Fl_Dial* octave3
    o->end();
  } // Fl_Double_Window* o
  return w;
}

Fl_Browser *patch_browser=(Fl_Browser *)0;

static void cb_patch_browser(Fl_Browser*, void*) {
  int value = patch_browser->value();

if (value)
{
	load_patch(patch_browser->text(value));
}

trigger_envelope1();
trigger_envelope2();
}

static void cb_SAVE(Fl_Button*, void*) {
  save_patch(save_name->value());
show_patch_window();
}

Fl_Input *save_name=(Fl_Input *)0;

static void cb_TRIGGER1(Fl_Button*, void*) {
  trigger_envelope1();
trigger_envelope2();
}

static void cb_RELEASE1(Fl_Button*, void*) {
  release_envelope1();
release_envelope2();
}

Fl_Double_Window* patch_window() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(570, 490, "Patch Manager");
    w = o;
    o->color((Fl_Color)104);
    o->labelcolor(FL_BACKGROUND2_COLOR);
    { Fl_Group* o = new Fl_Group(20, 20, 520, 435);
      o->box(FL_GTK_ROUND_UP_BOX);
      o->color((Fl_Color)44);
      o->labelcolor(FL_BACKGROUND2_COLOR);
      { patch_browser = new Fl_Browser(130, 60, 270, 280);
        patch_browser->type(1);
        patch_browser->color(FL_FOREGROUND_COLOR);
        patch_browser->labelsize(12);
        patch_browser->labelcolor(FL_BACKGROUND2_COLOR);
        patch_browser->textsize(12);
        patch_browser->textcolor(FL_BACKGROUND2_COLOR);
        patch_browser->callback((Fl_Callback*)cb_patch_browser);
      } // Fl_Browser* patch_browser
      { Fl_Button* o = new Fl_Button(440, 240, 70, 30, "SAVE");
        o->box(FL_GTK_ROUND_DOWN_BOX);
        o->color(FL_DARK1);
        o->labelsize(10);
        o->callback((Fl_Callback*)cb_SAVE);
      } // Fl_Button* o
      { save_name = new Fl_Input(130, 375, 270, 25, "NEW PATCH NAME");
        save_name->color((Fl_Color)51);
        save_name->selection_color((Fl_Color)104);
        save_name->labelsize(10);
        save_name->labelcolor(FL_BACKGROUND2_COLOR);
        save_name->textsize(12);
        save_name->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      } // Fl_Input* save_name
      { Fl_Button* o = new Fl_Button(410, 110, 70, 30, "TRIGGER");
        o->box(FL_GTK_ROUND_UP_BOX);
        o->color(FL_DARK1);
        o->labelsize(10);
        o->callback((Fl_Callback*)cb_TRIGGER1);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(440, 150, 70, 30, "RELEASE");
        o->box(FL_GTK_ROUND_UP_BOX);
        o->color(FL_DARK1);
        o->labelsize(10);
        o->callback((Fl_Callback*)cb_RELEASE1);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(420, 280, 70, 30, "DELETE");
        o->box(FL_GTK_ROUND_UP_BOX);
        o->color(FL_DARK1);
        o->labelsize(10);
      } // Fl_Button* o
      o->end();
    } // Fl_Group* o
    o->end();
  } // Fl_Double_Window* o
  return w;
}
